name: Bump Version on Main Merge

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  bump-version:
    if: >
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Determine release type
        id: release_type
        run: |
          echo '${{ toJSON(github.event.pull_request.labels) }}' > labels.json
          RELEASE_TYPE=""

          for label in $(jq -r '.[].name' labels.json); do
            if [[ "$label" == "major" || "$label" == "minor" || "$label" == "patch" ]]; then
              RELEASE_TYPE=$label
              break
            fi
          done

          if [ -z "$RELEASE_TYPE" ]; then
            echo "::warning::No valid release label (major/minor/patch) found. Skipping version bump."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.release_type.outputs.skip != 'true'
        uses: phips28/gh-action-bump-version@v10.1.1
        with:
          tag-prefix: "v"
          version-type: ${{ steps.release_type.outputs.type }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Retreive Previous Data
        if: steps.release_type.outputs.skip != 'true'
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_TAG=$(git describe --tags --abbrev=0)
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)

          echo "prev=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

          echo "Generating PR changelog from $PREV_TAG to $NEW_TAG..."

          COMMITS=$(git log $PREV_TAG..$NEW_TAG --pretty=format:"%H")

          PR_NUMBERS=$(git log $PREV_TAG..$NEW_TAG --pretty=format:"%s" | grep -oE "#[0-9]+" | tr -d "#" | sort -u)

          PR_LIST=""
          for pr in $PR_NUMBERS; do
            PR_JSON=$(gh pr view $pr --json title,number,url,author --jq '"- [#\(.number)](\(.url)) \(.title) (@\(.author.login))"')
            PR_LIST="$PR_LIST$PR_JSON\n"
          done

          COMMIT_LIST=$(git log $PREV_TAG..$NEW_TAG --pretty=format:"- %s (%an)")

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "### Merged Pull Requests:" >> $GITHUB_OUTPUT
          if [ -n "$PR_LIST" ]; then
            echo -e "$PR_LIST" >> $GITHUB_OUTPUT
          else
            echo "_No PRs found for this release._" >> $GITHUB_OUTPUT
          fi
          echo "" >> $GITHUB_OUTPUT
          echo "### Commits:" >> $GITHUB_OUTPUT
          echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate Github Release
        if: steps.release_type.outputs.skip != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          name: Release ${{ steps.changelog.outputs.tag }}
          body: |
            ## ðŸš€ Release ${{ steps.changelog.outputs.tag }}

            Changes since [${{ steps.changelog.outputs.prev }}](https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.prev }}...${{ steps.changelog.outputs.tag }}):

            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
